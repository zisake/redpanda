version: '3'

tasks:
  download-task:
    cmds:
    - sh -c "$(curl --location https://taskfile.dev/install.sh)" --
    status:
    - test -f bin/task

  task:
    desc: run Task within a docker image
    summary: |
      In scenarios where the host environment does not have the dependencies 
      expected by a task, the `docker:task` can be used to run it inside a 
      container. The goal for this is to behave exactly as if it was being 
      invoked on the host. For example:

        task docker:task \
          TASK_ARGS='rp:build COMPILER=gcc' \
          DOCKER_IMAGE=gcc:11

      is equivalent to:

        task rp:build COMPILER=gcc  # gcc-11 available on host

      When this task runs, the working directory ($PWD) is bind-mounted at the 
      same location as in the host, and some environment variables are defined 
      (see `cmds:` for the exact list).

      IMPORTANT: secrets should be defined in an `.env` file, rather than 
        passing them via the `-e` flag. Depending on how Task is configured, 
        using `-e` might cause the value of these secrets to be printed to 
        `stdout`.
    deps:
    - download-task
    cmds:
    - |
      docker run --rm -i {{.DOCKER_RUN_FLAGS}} \
        -e "COMMIT={{.COMMIT}}" \
        -e "CI={{.CI}}" \
        -e "TAG_NAME={{.TAG_NAME}}" \
        -e "BRANCH_NAME={{.BRANCH_NAME}}" \
        -e "COMPILER={{.COMPILER}}" \
        -e "BUILD_TYPE={{.BUILD_TYPE}}" \
        -e "PWD={{.PWD}}" \
        --volume '{{.PWD}}:{{.PWD}}' \
        --workdir '{{.PWD}}' \
        --entrypoint=bin/task \
        {{.DOCKER_IMAGE}} \
          {{.TASK_ARGS}}
